package com.henriquefigueiredo.simplesquarevalidatorconsumer;

import com.henriquefigueiredo.simplesquarevalidatorconsumer.dto.ResponseSquareDTO;
import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.cloud.contract.stubrunner.spring.AutoConfigureStubRunner;
import org.springframework.cloud.contract.stubrunner.spring.StubRunnerProperties;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@AutoConfigureStubRunner(ids = {"com.henriquefigueiredo:simple-square-validator-producer:+:stubs:8081"}, stubsMode = StubRunnerProperties.StubsMode.LOCAL)//import the local stub generated by producer
public class SquareContractIntegrationTest {

    @LocalServerPort
    private int port;

    @Test
    public void shouldReturnASquareWhenTheBaseAndTheHeightWhereEquals() {
        final String url =  String.format("http://127.0.0.1:%s/api/v1/square/2/2", this.port);

        RestTemplate restTemplate = new RestTemplate();
        ResponseEntity<ResponseSquareDTO> responseEntity = restTemplate.getForEntity(url, ResponseSquareDTO.class);
        Assertions.assertThat(responseEntity.getStatusCodeValue()).isEqualTo(200);
        ResponseSquareDTO square = responseEntity.getBody();
        Assertions.assertThat(square.getSquareType()).isEqualTo("SQUARE");
    }

    @Test
    public void shouldReturnARectangleWhenTheBaseAndTheHeightAreDiffenrents() {
        final String url =  String.format("http://127.0.0.1:%s/api/v1/square/2/4", this.port);

        RestTemplate restTemplate = new RestTemplate();
        ResponseEntity<ResponseSquareDTO> responseEntity = restTemplate.getForEntity(url, ResponseSquareDTO.class);
        Assertions.assertThat(responseEntity.getStatusCodeValue()).isEqualTo(200);
        ResponseSquareDTO square = responseEntity.getBody();
        Assertions.assertThat(square.getSquareType()).isEqualTo("RECTANGLE");
    }

    @Test
    public void shouldReturnThatIsNotValidSquareWhenTheBaseIsNegative() {
        final String url =  String.format("http://127.0.0.1:%s/api/v1/square/-2/2", this.port);

        RestTemplate restTemplate = new RestTemplate();
        ResponseEntity<ResponseSquareDTO> responseEntity = restTemplate.getForEntity(url, ResponseSquareDTO.class);
        Assertions.assertThat(responseEntity.getStatusCodeValue()).isEqualTo(200);
        ResponseSquareDTO square = responseEntity.getBody();
        Assertions.assertThat(square.getSquareType()).isEqualTo("NON_VALID_SQUARE");
    }
}
